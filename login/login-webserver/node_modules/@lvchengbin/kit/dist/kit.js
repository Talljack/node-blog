(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
    typeof define === 'function' && define.amd ? define(factory) :
    (global.kit = factory());
}(this, (function () { 'use strict';

    /**
     * async function
     *
     * @syntax: 
     *  async function() {}
     *  async () => {}
     *  async x() => {}
     *
     * @compatibility
     * IE: no
     * Edge: >= 15
     * Android: >= 5.0
     *
     */

    var isAsyncFunction = fn => ( {} ).toString.call( fn ) === '[object AsyncFunction]';

    var isFunction = fn => ({}).toString.call( fn ) === '[object Function]' || isAsyncFunction( fn );

    const assign = ( dest, ...sources ) => {
        if( isFunction( Object.assign ) ) {
            return Object.assign( dest, ...sources );
        }
        const obj = sources[ 0 ];
        for( let property in obj ) {
            if( obj.hasOwnProperty( property ) ) {
                dest[ property ] = obj[ property ];
            }
        }
        if( sources.length > 1 ) {
            return assign( dest, ...sources.splice( 1, sources.length - 1 ) );
        }
        return dest;
    };

    /**
     * for search a specified element from an array.
     * the difference between this method and the native Array.prototype.indexOf is that
     * this function is not using the strict equal for comparing the element which you wanna search,
     * so in this function 1 and "1" are equal
     */
    function indexOf( array, searchElement, fromIndex ) {
        for( let i = fromIndex || 0, l = array.length; i < l; i += 1 ) {
            if( array[ i ] == searchElement ) {
                return i;
            }
        }
        return -1;
    }

    var scrollTop = () => window.scrollY || window.pageYOffset || document.body.scrollTop + ( document.documentElement && document.documentElement.scrollTop || 0 );

    let i = 0;
    var uniqid = () => i++;

    var pick = ( options, defaultValue ) => {
        for( const item of options ) {
            if( item[ 1 ] ) return item[ 0 ]; 
        }
        return defaultValue;
    };

    var ucfirst = str => str ? str.charAt( 0 ).toUpperCase() + str.substr( 1 ) : str;

    var ucwords = str => str.replace( /(\b[a-zA-Z])/g, ( m, n ) => n.toUpperCase() );

    var mapToObject = m => Array.from( m ).reduce( ( o, [ k, v ] ) => ( o[ k ] = v, o ), {} );

    var kit = { 
        objectAssign: assign,
        arrayIndexOf: indexOf,
        scrollTop,
        uniqid,
        pick,
        ucfirst,
        ucwords,
        mapToObject
    };

    return kit;

})));

(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
    typeof define === 'function' && define.amd ? define(factory) :
    (global.kit = factory());
}(this, (function () { 'use strict';

    /**
     * async function
     *
     * @syntax: 
     *  async function() {}
     *  async () => {}
     *  async x() => {}
     *
     * @compatibility
     * IE: no
     * Edge: >= 15
     * Android: >= 5.0
     *
     */

    function isAsyncFunction (fn) { return ( {} ).toString.call( fn ) === '[object AsyncFunction]'; }

    function isFunction (fn) { return ({}).toString.call( fn ) === '[object Function]' || isAsyncFunction( fn ); }

    var assign = function ( dest ) {
        var sources = [], len = arguments.length - 1;
        while ( len-- > 0 ) sources[ len ] = arguments[ len + 1 ];

        if( isFunction( Object.assign ) ) {
            return Object.assign.apply( Object, [ dest ].concat( sources ) );
        }
        var obj = sources[ 0 ];
        for( var property in obj ) {
            if( obj.hasOwnProperty( property ) ) {
                dest[ property ] = obj[ property ];
            }
        }
        if( sources.length > 1 ) {
            return assign.apply( void 0, [ dest ].concat( sources.splice( 1, sources.length - 1 ) ) );
        }
        return dest;
    };

    /**
     * for search a specified element from an array.
     * the difference between this method and the native Array.prototype.indexOf is that
     * this function is not using the strict equal for comparing the element which you wanna search,
     * so in this function 1 and "1" are equal
     */
    function indexOf( array, searchElement, fromIndex ) {
        for( var i = fromIndex || 0, l = array.length; i < l; i += 1 ) {
            if( array[ i ] == searchElement ) {
                return i;
            }
        }
        return -1;
    }

    function scrollTop () { return window.scrollY || window.pageYOffset || document.body.scrollTop + ( document.documentElement && document.documentElement.scrollTop || 0 ); }

    var i = 0;
    function uniqid () { return i++; }

    function pick ( options, defaultValue ) {
        for( var i = 0, list = options; i < list.length; i += 1 ) {
            var item = list[i];

            if( item[ 1 ] ) { return item[ 0 ]; } 
        }
        return defaultValue;
    }

    function ucfirst (str) { return str ? str.charAt( 0 ).toUpperCase() + str.substr( 1 ) : str; }

    function ucwords (str) { return str.replace( /(\b[a-zA-Z])/g, function ( m, n ) { return n.toUpperCase(); } ); }

    function mapToObject (m) { return Array.from( m ).reduce( function ( o, ref ) {
    	var k = ref[0];
    	var v = ref[1];

    	return ( o[ k ] = v, o );
    	}, {} ); }

    var kit = { 
        objectAssign: assign,
        arrayIndexOf: indexOf,
        scrollTop: scrollTop,
        uniqid: uniqid,
        pick: pick,
        ucfirst: ucfirst,
        ucwords: ucwords,
        mapToObject: mapToObject
    };

    return kit;

})));
